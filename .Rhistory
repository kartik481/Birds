ex_m[i, j] <-  ex_m[i, (j-1)] * (1-p.open) * phi[j-1]
}
N_exm[i] <- m[i,1] - sum(ex_m[i,-1])
}
## For last row
ex_m[T-1, T] <- m[T-1, 1] * phi[T-1] * p.open
N_exm[T-1] <- m[T-1, 1] - sum(ex_m[T-1,-1])
ex_m <- cbind(ex_m, N_exm)
print(ex_m)
for (i in 1:(T-1)) {
R <- m[i,1]
if(R==0){
next
}
else{
ex_m[i,-1] <- ex_m[i,-1]/R
}
}
## Removing the first column from observed and expected m-arrays
m <- m[,-1]
ex_m <- ex_m[,-1]
## Adding small constant to mitigate numerical overflow
eps <- 1e-100
## Doing a pearson chi-square test and calculating p-value using monte-carlo
## simulation
chi_square_test.open <- chisq.test(m+eps, ex_m+eps, simulate.p.value = TRUE)
#fisher.test(table(m, ex_m), simulate.p.value = TRUE)
## Printing the chi-square test results
cat("Chi-square test statistic:","\n")
chi_square_test.open
## According to multinomial assumption degrees of freedom can be defined as
## df = k-1-d (where k=No. of multinomial cells, d=Number of estimated parameters)
alpha<- 0.05
df <- 2924
critical_value <- qchisq(1 - alpha, df)
print("Critical value is:",critical_value)
cat("Critical value is:", critical_value)
## Doing the fisher test
fisher.test(table(m), table(ex_m), simulate.p.value = TRUE)
dim(m)
dim(ex_m)
## Doing the fisher test
fisher.test(table(m), table(ex_m), simulate.p.value = TRUE)
## Doing the fisher test
contingency_table <- matrix(c(m, ex_m), nrow = nrow(m)+nrow = ex_m, byrow = TRUE)
## Doing the fisher test
contingency_table <- matrix(c(m, ex_m), nrow = nrow(m)+nrow(ex_m), byrow = TRUE)
# Perform Fisher's exact test
result <- fisher.test(contingency_table, simulate.p.value = TRUE)
# Print the result
print(result)
# Perform Fisher's exact test
result <- fisher.test(contingency_table, simulate.p.value = TRUE, B=10000)
# Print the result
print(result)
fisher.test(table(m, ex_m), simulate.p.value = TRUE)
table(m, ex_m)
############################ Birds project #####################################
############################ chifchaf estimates #############################
## setting the seed
set.seed(123)
## Loading the required Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(Rcapture)
library(gridExtra)
library(vcd)
library(generalhoslem)
library(ResourceSelection)
## Loading the open_population file in which functions for maximising different
## models are stored(Please change the file path accordingly)
source("~/Documents/Birds/CJSlik.R")
## Loading the chifchaf dataset
chifchaf <- read.csv("~/Documents/Birds/CR.chifchaf_FixRing.csv", sep =';'
,header=TRUE)
## Printing the dimensions of the chifchaf DataFrame
cat("Dimension of chifchaf data is:", dim(chifchaf))
## Removing the first four months from the data
chifchaf <- chifchaf[, -c(1:4)]
## Checking if operation was successful
##View(chifchaf)
## Checking if there is any rows with missing data
naRows<- colSums(is.na(chifchaf)) > 0
cat("No. of rows with missing data:", sum(naRows))
## Calculating number of zeroes in the observations
zeros <- length(which(rowSums(chifchaf[, -ncol(chifchaf)])==0))
cat("No. of zeros in data are:", zeros)
## Removing zero observations
chifchaf <- chifchaf[rowSums(chifchaf[, -ncol(chifchaf)] != 0) > 0, ]
## Getting unique value
ageRing <- unique(chifchaf$age_at_ringing)
cat("No. of unique values in age_at_ringing:",ageRing)
## Getting the rows numbers where unkown is present and removing them
rowNum <- which(chifchaf$age_at_ringing == "Unknown")
cat("Number of rows with unknown:",length(rowNum))
## Strong unknown observations in a separate dataFrame
unknownObs <- chifchaf[rowNum,]
## Removing unkonwn from the dataFrame
chifchaf <- chifchaf[-rowNum, ]
## Create separate data frames for adults and juveniles
adultschifchaf <- chifchaf[chifchaf$age_at_ringing == "adult", ]
juvenileschifchaf <- chifchaf[chifchaf$age_at_ringing == "juvenile", ]
## Printing the number of adults and juveniles
cat('No. of adults in chifchaf:', nrow(adultschifchaf),'\n')
cat('No. of juveniles in chifchaf:', nrow(juvenileschifchaf),'\n')
## Getting the number of adult and juvenile populations
juvenile_freq <- nrow(adultschifchaf)
adult_freq <- nrow(juvenileschifchaf)
## Getting the captured(1) and uncaptured(0) frequenci.chifchafes
freq_0 <- apply(chifchaf, 1, function(x) sum(x == 0))
freq_1 <- apply(chifchaf, 1, function(x) sum(x == 1))
## Removing the last column(age at ringing) from the adult and juvenile data
adultschifchaf <- adultschifchaf[, -ncol(adultschifchaf)]
juvenileschifchaf <-juvenileschifchaf[, -ncol(juvenileschifchaf)]
## Transposing the dataFrame
plotchifchafjuve <- t(juvenileschifchaf)
plotchifchafadul <- t(adultschifchaf)
## Converting all values in the data frame from string to integer
plotchifchafjuve <- as.data.frame(apply(plotchifchafjuve, 2, as.numeric))
plotchifchafadul <- as.data.frame(apply(plotchifchafadul, 2, as.numeric))
## Calculating the number of birds captured each day
plotchifchafjuve$CapSum <- rowSums(plotchifchafjuve)
plotchifchafadul$CapSum <- rowSums(plotchifchafadul)
## generating the month names from October 2007 to April 2018
Months <- seq(as.Date("2007-10-01"), as.Date("2018-04-01"), by = "months")
# Exclude speci.chifchaffic months from the sequence
excluded_months <- grepl("May|June|July|August|September", format(Months, "%B"))
# Convert the Months vector to a sequence of month names
Months <- format(Months, format = "%B %Y")
# Create a new sequence of months that excludes the speci.chifchaffied months
Month <- Months[!excluded_months]
## Making a combined dataFrame for captured adults and juveniles
combData <- data.frame(Month = c(1:77), Juvenile = plotchifchafjuve$CapSum,
Adult = plotchifchafadul$CapSum)
## Reshape the data frame to a long format to plot
combData_long <- pivot_longer(combData, cols = c(Juvenile, Adult),
names_to = "Group", values_to = "Captured")
## Using ggplot to plotting the captured birds over different months
p <- ggplot(combData_long, aes(x = Month, y = Captured, color = Group)) +
geom_point() + geom_line() +
xlab("Months (October 2007 to April 2018)") +
ylab("No. of captured (per session)") +
ggtitle("chifchaf captured over different sessions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
plot.title = element_text(hjust = 0.5))
## Defining custom labels for x-axis
custom_breaks <- seq(1, 77, by = 5)
custom_labels <- Month[custom_breaks]
## Appending labels to the graph
p <- p + scale_x_continuous(breaks = custom_breaks, labels = custom_labels)
## Printing the plot
print(p)
n <- 77                                ## Total no initial occasions
occassions <- floor(n / 7)             ## Inter-winter period spans for 7 months
## So dividing by 7 to convert to yearly
## Storing age at initial ringing
age_ring <- chifchaf$age_at_ringing
## Removing the last column
chifchaf <- chifchaf[,-ncol(chifchaf)]
# Create a new data frame to store the yearly capture-recapture data
yearly_chifchaf <- matrix(0, nrow = nrow(chifchaf), ncol = occassions)
## This loop sum over first 7 months, then 7... till last occasion and store it
## in new matrix
for(j in 1:nrow(chifchaf)){
for (i in 1:occassions) {
start_idx <- (i - 1) * 7 + 1
end_idx <- i * 7
prod <- chifchaf[j, start_idx : end_idx]
total <- sum(prod)
yearly_chifchaf[j, i] <- total
}
}
## Since the data should be binary putting 1 in places where birds are recaptured
## otherwise 0
for(k in 1:nrow(yearly_chifchaf)){
for(j in 1:ncol(yearly_chifchaf)){
if(yearly_chifchaf[k,j]!=0){
yearly_chifchaf[k,j]=1
}
}
}
## Getting the total number of birds captured yearly
cat('Birds captured over different inter-winter sessions','\n')
cat(colSums(yearly_chifchaf))
n <- nrow(yearly_chifchaf)            ## Total no of birds
T <- ncol(yearly_chifchaf)            ## Total no. of capture occasions
theta.open <- rnorm(T)                ## Initialising the parameters
## Getting MLE for theta for open population
theta.open.chifchaf.cons <- log.mle.open(theta.open, yearly_chifchaf)
##################### Age dependent CJS-model ##################################
##################### with constant recapture ##################################
## creating a age matrix to store age according to time
age <- matrix(0, nrow = nrow(chifchaf), ncol = ncol(yearly_chifchaf))
## Lopping over the data, if age at ringing at juvenile at first then keeping
## that time 1 otherwise after that it's gonna adult so adding 2 to show bird has
## become adult
for(i in 1:nrow(yearly_chifchaf)){
age_at_i <- age_ring[i]
if(age_at_i=='adult'){
first_cap <- which(yearly_chifchaf[i,]==1)[1]
age[i, first_cap:occassions] <- age[i, first_cap:occassions]+2
}
else if (age_at_i=='juvenile'){
first_cap <- which(yearly_chifchaf[i,]==1)[1]
age[i, first_cap] <- 1
if(first_cap+1>11){
next
}
age[i, (first_cap+1):occassions] <- age[i, (first_cap+1):occassions]+2
}
}
## Following code getting age for the birds based on monthly data ##############
# for(i in 1:nrow(chifchaf)){
#   age_at_i <- age_ring[i]
#   if(age_at_i=='adult'){
#     first_cap <- which(chifchaf[i,]==1)[1]
#     age[i, first_cap:ncol(chifchaf)] <- age[i, first_cap:ncol(chifchaf)]+2
#
#   }
#   else if (age_at_i=='juvenile'){
#     first_cap <- which(chifchaf[i,]==1)[1]
#     if(first_cap+1>78){
#       next
#     }
#     else if(first_cap+6>=77){
#       age[i, first_cap:ncol(chifchaf)] <- age[i, first_cap:ncol(chifchaf)]+1
#     }
#     else{
#       if(first_cap+7<=77){
#         age[i, first_cap:(first_cap+6)]<-age[i, first_cap:(first_cap+6)]+1
#         age[i, (first_cap+7):ncol(chifchaf)]<-age[i, (first_cap+7):ncol(chifchaf)]+2
#       }
#     }
#   }
# }
## viewing the age matrix
#View(age)
n <- nrow(yearly_chifchaf)            ## Total no of birds
T <- ncol(yearly_chifchaf)            ## Total no. of capture occasions
theta.open <- rep(0.5, T+1)           ## Initialising the parameters
## Getting MLE for theta for open population
theta.open.chifchaf.p.cons <- log.mle.open.age.p.cons(theta.open, yearly_chifchaf, age)
############################ Birds project #####################################
############################ blackcap estimates #############################
## setting the seed
set.seed(123)
## Loading the required Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(Rcapture)
library(gridExtra)
library(vcd)
library(generalhoslem)
library(ResourceSelection)
## Loading the open_population file in which functions for maximising different
## models are stored(Change according to your directory)
source("~/Documents/Birds/CJSlik.R")
## Loading the blackcap dataset
blackcap <- read.csv("~/Documents/Birds/CR.blackcap_FixRing.csv", sep =';'
,header=TRUE)
## Printing the dimensions of the blackcap DataFrame
cat("Dimension of blackcap data is:", dim(blackcap))
## Removing the first four months from the data
blackcap <- blackcap[, -c(1:4)]
## Checking if operation was successful
##View(blackcap)
## Checking if there is any rows with missing data
naRows<- colSums(is.na(blackcap)) > 0
cat("No. of rows with missing data:", sum(naRows))
## Calculating number of zeroes in the observations
zeros <- length(which(rowSums(blackcap[, -ncol(blackcap)])==0))
cat("No. of zeros in data are:", zeros)
## Removing zero observations
blackcap <- blackcap[rowSums(blackcap[, -ncol(blackcap)] != 0) > 0, ]
## Getting unique value
ageRing <- unique(blackcap$age_at_ringing)
cat("No. of unique values in age_at_ringing:",ageRing)
## Getting the rows numbers where unkown is present and removing them
rowNum <- which(blackcap$age_at_ringing == "Unknown")
cat("Number of rows with unknown:",length(rowNum))
## Strong unknown observations in a separate dataFrame
unknownObs <- blackcap[rowNum,]
## Removing unkonwn from the dataFrame
blackcap <- blackcap[-rowNum, ]
## Create separate data frames for adults and juveniles
adultsblackcap <- blackcap[blackcap$age_at_ringing == "adult", ]
juvenilesblackcap <- blackcap[blackcap$age_at_ringing == "juvenile", ]
## Printing the number of adults and juveniles
cat('No. of adults in blackcap:', nrow(adultsblackcap),'\n')
cat('No. of juveniles in blackcap:', nrow(juvenilesblackcap),'\n')
## Getting the number of adult and juvenile populations
juvenile_freq <- nrow(adultsblackcap)
adult_freq <- nrow(juvenilesblackcap)
## Getting the captured(1) and uncaptured(0) frequenci.blackcapes
freq_0 <- apply(blackcap, 1, function(x) sum(x == 0))
freq_1 <- apply(blackcap, 1, function(x) sum(x == 1))
## Removing the last column(age at ringing) from the adult and juvenile data
adultsblackcap <- adultsblackcap[, -ncol(adultsblackcap)]
juvenilesblackcap <-juvenilesblackcap[, -ncol(juvenilesblackcap)]
## Transposing the dataFrame
plotblackcapjuve <- t(juvenilesblackcap)
plotblackcapadul <- t(adultsblackcap)
## Converting all values in the data frame from string to integer
plotblackcapjuve <- as.data.frame(apply(plotblackcapjuve, 2, as.numeric))
plotblackcapadul <- as.data.frame(apply(plotblackcapadul, 2, as.numeric))
## Calculating the number of birds captured each day
plotblackcapjuve$CapSum <- rowSums(plotblackcapjuve)
plotblackcapadul$CapSum <- rowSums(plotblackcapadul)
## generating the month names from October 2007 to April 2018
Months <- seq(as.Date("2007-10-01"), as.Date("2018-04-01"), by = "months")
# Exclude speci.blackcapfic months from the sequence
excluded_months <- grepl("May|June|July|August|September", format(Months, "%B"))
# Convert the Months vector to a sequence of month names
Months <- format(Months, format = "%B %Y")
# Create a new sequence of months that excludes the speci.blackcapfied months
Month <- Months[!excluded_months]
## Making a combined dataFrame for captured adults and juveniles
combData <- data.frame(Month = c(1:77), Juvenile = plotblackcapjuve$CapSum,
Adult = plotblackcapadul$CapSum)
## Reshape the data frame to a long format to plot
combData_long <- pivot_longer(combData, cols = c(Juvenile, Adult),
names_to = "Group", values_to = "Captured")
## Using ggplot to plotting the captured birds over different months
p <- ggplot(combData_long, aes(x = Month, y = Captured, color = Group)) +
geom_point() + geom_line() +
xlab("Months (October 2007 to April 2018)") +
ylab("No. of captured (per session)") +
ggtitle("blackcap captured over different sessions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
plot.title = element_text(hjust = 0.5))
## Defining custom labels for x-axis
custom_breaks <- seq(1, 77, by = 5)
custom_labels <- Month[custom_breaks]
## Appending labels to the graph
p <- p + scale_x_continuous(breaks = custom_breaks, labels = custom_labels)
## Printing the plot
print(p)
n <- 77                                ## Total no initial occasions
occassions <- floor(n / 7)             ## Inter-winter period spans for 7 months
## So dividing by 7 to convert to yearly
## Storing age at initial ringing
age_ring <- blackcap$age_at_ringing
## Removing the last column
blackcap <- blackcap[,-ncol(blackcap)]
# Create a new data frame to store the yearly capture-recapture data
yearly_blackcap <- matrix(0, nrow = nrow(blackcap), ncol = occassions)
## This loop sum over first 7 months, then 7... till last occasion and store it
## in new matrix
for(j in 1:nrow(blackcap)){
for (i in 1:occassions) {
start_idx <- (i - 1) * 7 + 1
end_idx <- i * 7
prod <- blackcap[j, start_idx : end_idx]
total <- sum(prod)
yearly_blackcap[j, i] <- total
}
}
## Since the data should be binary putting 1 in places where birds are recaptured
## otherwise 0
for(k in 1:nrow(yearly_blackcap)){
for(j in 1:ncol(yearly_blackcap)){
if(yearly_blackcap[k,j]!=0){
yearly_blackcap[k,j]=1
}
}
}
## Getting the total number of birds captured yearly in each session
cat('Birds captured over different inter-winter sessions','\n')
cat(colSums(yearly_blackcap))
n <- nrow(yearly_blackcap)            ## Total no of birds
T <- ncol(yearly_blackcap)            ## Total no. of capture occasions
theta.open <- rnorm(T)                ## Initialising the parameters
## Getting MLE for theta for open population
theta.open.blackcap.cons <- log.mle.open(theta.open, yearly_blackcap)
############################ Birds project #####################################
############################ robin estimates #############################
## setting the seed
set.seed(123)
## Loading the required Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(Rcapture)
library(gridExtra)
library(vcd)
library(generalhoslem)
library(ResourceSelection)
## Loading the open_population file in which functions for maximising different
## models are stored(Please change the file path accordingly)
source("~/Documents/Birds/CJSlik.R")
## Loading the robin dataset
robin <- read.csv("~/Documents/Birds/CR.robin_FixRing.csv", sep =';'
,header=TRUE)
## Printing the dimensions of the robin DataFrame
cat("Dimension of robin data is:", dim(robin))
## Removing the first four months from the data
robin <- robin[, -c(1:4)]
## Checking if operation was successful
##View(robin)
## Checking if there is any rows with missing data
naRows<- colSums(is.na(robin)) > 0
cat("No. of rows with missing data:", sum(naRows))
## Calculating number of zeroes in the observations
zeros <- length(which(rowSums(robin[, -ncol(robin)])==0))
cat("No. of zeros in data are:", zeros)
## Removing zero observations
robin <- robin[rowSums(robin[, -ncol(robin)] != 0) > 0, ]
## Getting unique value
ageRing <- unique(robin$age_at_ringing)
cat("No. of unique values in age_at_ringing:",ageRing)
## Getting the rows numbers where unkown is present and removing them
rowNum <- which(robin$age_at_ringing == "Unknown")
cat("Number of rows with unknown:",length(rowNum))
## Strong unknown observations in a separate dataFrame
unknownObs <- robin[rowNum,]
## Removing unkonwn from the dataFrame
robin <- robin[-rowNum, ]
## Create separate data frames for adults and juveniles
adultsrobin <- robin[robin$age_at_ringing == "adult", ]
juvenilesrobin <- robin[robin$age_at_ringing == "juvenile", ]
## Printing the number of adults and juveniles
cat('No. of adults in robin:', nrow(adultsrobin),'\n')
cat('No. of juveniles in robin:', nrow(juvenilesrobin),'\n')
## Getting the number of adult and juvenile populations
juvenile_freq <- nrow(adultsrobin)
adult_freq <- nrow(juvenilesrobin)
## Getting the captured(1) and uncaptured(0) frequenci.robines
freq_0 <- apply(robin, 1, function(x) sum(x == 0))
freq_1 <- apply(robin, 1, function(x) sum(x == 1))
## Removing the last column(age at ringing) from the adult and juvenile data
adultsrobin <- adultsrobin[, -ncol(adultsrobin)]
juvenilesrobin <-juvenilesrobin[, -ncol(juvenilesrobin)]
## Transposing the dataFrame
plotrobinjuve <- t(juvenilesrobin)
plotrobinadul <- t(adultsrobin)
## Converting all values in the data frame from string to integer
plotrobinjuve <- as.data.frame(apply(plotrobinjuve, 2, as.numeric))
plotrobinadul <- as.data.frame(apply(plotrobinadul, 2, as.numeric))
## Calculating the number of birds captured each day
plotrobinjuve$CapSum <- rowSums(plotrobinjuve)
plotrobinadul$CapSum <- rowSums(plotrobinadul)
## generating the month names from October 2007 to April 2018
Months <- seq(as.Date("2007-10-01"), as.Date("2018-04-01"), by = "months")
# Exclude speci.robinfic months from the sequence
excluded_months <- grepl("May|June|July|August|September", format(Months, "%B"))
# Convert the Months vector to a sequence of month names
Months <- format(Months, format = "%B %Y")
# Create a new sequence of months that excludes the speci.robinfied months
Month <- Months[!excluded_months]
## Making a combined dataFrame for captured adults and juveniles
combData <- data.frame(Month = c(1:77), Juvenile = plotrobinjuve$CapSum,
Adult = plotrobinadul$CapSum)
## Reshape the data frame to a long format to plot
combData_long <- pivot_longer(combData, cols = c(Juvenile, Adult),
names_to = "Group", values_to = "Captured")
## Using ggplot to plotting the captured birds over different months
p <- ggplot(combData_long, aes(x = Month, y = Captured, color = Group)) +
geom_point() + geom_line() +
xlab("Months (October 2007 to April 2018)") +
ylab("No. of captured (per session)") +
ggtitle("robin captured over different sessions") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
plot.title = element_text(hjust = 0.5))
## Defining custom labels for x-axis
custom_breaks <- seq(1, 77, by = 5)
custom_labels <- Month[custom_breaks]
## Appending labels to the graph
p <- p + scale_x_continuous(breaks = custom_breaks, labels = custom_labels)
## Printing the plot
print(p)
n <- 77                                ## Total no initial occasions
occassions <- floor(n / 7)             ## Inter-winter period spans for 7 months
## So dividing by 7 to convert to yearly
## Storing age at initial ringing
age_ring <- robin$age_at_ringing
## Removing the last column
robin <- robin[,-ncol(robin)]
# Create a new data frame to store the yearly capture-recapture data
yearly_robin <- matrix(0, nrow = nrow(robin), ncol = occassions)
## This loop sum over first 7 months, then 7... till last occasion and store it
## in new matrix
for(j in 1:nrow(robin)){
for (i in 1:occassions) {
start_idx <- (i - 1) * 7 + 1
end_idx <- i * 7
prod <- robin[j, start_idx : end_idx]
total <- sum(prod)
yearly_robin[j, i] <- total
}
}
## Since the data should be binary putting 1 in places where birds are recaptured
## otherwise 0
for(k in 1:nrow(yearly_robin)){
for(j in 1:ncol(yearly_robin)){
if(yearly_robin[k,j]!=0){
yearly_robin[k,j]=1
}
}
}
## Getting the total number of birds captured yearly
cat('Birds captured over different inter-winter sessions','\n')
cat(colSums(yearly_robin))
n <- nrow(yearly_robin)            ## Total no of birds
T <- ncol(yearly_robin)            ## Total no. of capture occasions
theta.open <- rnorm(T)                ## Initialising the parameters
## Getting MLE for theta for open population
theta.open.robin.cons <- log.mle.open(theta.open, yearly_robin)
